# üìö AI Agent Assessment Platform

This project is a full-stack application for generating and scoring critical thinking assessments using OpenRouter AI APIs. It includes a **FastAPI backend**, a **React frontend**, and **Docker** for containerized deployment.

---

## üöÄ Tech Stack

* **Frontend:** React
* **Backend:** FastAPI (Python)
* **ML Model:** `.joblib`-based scoring model
* **Database:** SQLite (via Docker volume)
* **AI Integration:** OpenRouter API
* **Containerization:** Docker & Docker Compose

---

## üìÜ Project Structure

```
project-root/
‚îÇ
‚îú‚îÄ‚îÄ backend/
‚îÇ   ‚îú‚îÄ‚îÄ main.py
‚îÇ   ‚îú‚îÄ‚îÄ routes/
‚îÇ   ‚îú‚îÄ‚îÄ scoring_models/
‚îÇ   ‚îî‚îÄ‚îÄ Dockerfile
‚îÇ
‚îú‚îÄ‚îÄ frontend/
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îî‚îÄ‚îÄ Dockerfile
‚îÇ
‚îú‚îÄ‚îÄ docker-compose.yml
‚îî‚îÄ‚îÄ README.md
```

---

## üê≥ Run the Project with Docker

### 1. üß∞ Prerequisites

* Docker
* Docker Compose

### 2. üîë Set Environment Variables (optional)

Environment variables like `OPENROUTER_API_KEY` and `ML_MODEL_PATH` are already configured inside `docker-compose.yml`.

### 3. ‚ñ∂Ô∏è Start the app

```bash
docker-compose up --build
```

> This will:
>
> * Start the FastAPI backend on `http://localhost:8000`
> * Start the React frontend on `http://localhost:3000`

---

## üì° API Endpoint Overview (FastAPI)

| Method | Endpoint                    | Description                          |
| ------ | --------------------------- | ------------------------------------ |
| POST   | `/assessment/generate-test` | Generate a new test using OpenRouter |
| POST   | `/assessment/submit-test`   | Submit answers and get score         |
| GET    | `/health`                   | Health check for the backend         |

---

## üìÅ Environment Variables

These are set in `docker-compose.yml`:

```env
OPENROUTER_API_KEY=your-key-here
ML_MODEL_PATH=/app/scoring_models/scoring_model.joblib
DATABASE_URL=sqlite:////app/db/ai-agent.db
DEBUG=True
```

You can move these to an `.env` file and load them using `dotenv` if needed.

---

## üß† Scoring Model

Make sure your model is available in:

```
backend/scoring_models/scoring_model.joblib
```

Update the path via `ML_MODEL_PATH` if needed.

---

## üîç Frontend (React)

The frontend communicates with the backend via:

```env
REACT_APP_API_URL=http://backend:8000
```

It's configured in the `frontend` service of `docker-compose.yml`.

---

## ‚úÖ Troubleshooting

* ‚ùó **503 from OpenRouter**
  Check if your model is available and chute ID is correct (or remove it and use a valid model ID like `openai/gpt-3.5-turbo`).

* ‚ùó **Frontend not loading**
  Make sure Docker volumes are working and React is served on port `3000`.

---


